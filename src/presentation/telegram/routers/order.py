from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from dishka.integrations.aiogram import inject, FromDishka
from src.application.usecases.create_order import CreateOrderUseCase
from src.presentation.telegram.states.cart_states import OrderState

order_router: Router = Router(name=__name__)


@order_router.callback_query(F.data == "checkout")
async def handle_checkout(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
    await state.update_data(bot_message_id=callback.message.message_id)
    await state.set_state(OrderState.waiting_name)


@order_router.message(OrderState.waiting_name)
async def handle_name_input(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.delete()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")]
    ])
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    
    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=bot_message_id,
        text="üè† –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=keyboard
    )
    await state.set_state(OrderState.waiting_address)


@order_router.message(OrderState.waiting_address)
async def handle_address_input(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.delete()
    
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")]
    ])
    
    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=bot_message_id,
        text="üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=keyboard
    )
    await state.set_state(OrderState.waiting_phone)


@order_router.message(OrderState.waiting_phone)
async def handle_phone_input(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.delete()
    
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∞", callback_data="payment_card")],
        [InlineKeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="payment_cash")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")]
    ])
    
    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=bot_message_id,
        text="üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=keyboard
    )
    await state.set_state(OrderState.waiting_payment)


@order_router.callback_query(F.data.startswith("payment_"))
@inject
async def handle_payment_selection(
    callback: CallbackQuery,
    state: FSMContext,
    create_order_use_case: FromDishka[CreateOrderUseCase]
):
    payment_method = "–ö–∞—Ä—Ç–∞" if callback.data == "payment_card" else "–ù–∞–ª–∏—á–Ω—ã–µ"
    
    data = await state.get_data()
    await create_order_use_case.execute(
        callback.from_user.id,
        data['full_name'],
        data['address'],
        data['phone'],
        payment_method
    )
    
    await state.clear()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    await callback.message.edit_text("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!", reply_markup=keyboard)


@order_router.callback_query(F.data == "cancel_order")
async def handle_cancel_order(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    await callback.message.edit_text("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard)
